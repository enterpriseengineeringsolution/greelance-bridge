{
  "address": "0x796206830675253021EF89654033CC98C72236Cd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limitPerSend_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeWallet_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feeSend_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeFulfill_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "relayers_",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "relayerConsensusThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "fromUser",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fromChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "toChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "FulfilledTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromUser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "toUser",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fromChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "toChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "SentTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURRENT_CHAIN",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CURRENT_CHAIN_B32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FULFILL_TX_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RELAYERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "chains",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "exchangeRatesFromPow",
          "type": "uint256[]"
        }
      ],
      "name": "addChains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "exchangeRateFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeFulfill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "fromUser",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "toUser",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "fromChain",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct BridgeAssist.FulfillTx",
          "name": "transaction",
          "type": "tuple"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fulfilledAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserTransactions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fromUser",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "toUser",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fromChain",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "toChain",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            }
          ],
          "internalType": "struct BridgeAssist.Transaction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserTransactionsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "name": "getUserTransactionsSlice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fromUser",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "toUser",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fromChain",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "toChain",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            }
          ],
          "internalType": "struct BridgeAssist.Transaction[]",
          "name": "transactions_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chain",
          "type": "string"
        }
      ],
      "name": "isSupportedChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitPerSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerConsensusThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "chains",
          "type": "string[]"
        }
      ],
      "name": "removeChains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "toUser",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toChain",
          "type": "string"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeSend_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeFulfill_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeWallet_",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limitPerSend_",
          "type": "uint256"
        }
      ],
      "name": "setLimitPerSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "relayers_",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "relayerConsensusThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setRelayers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportedChainList",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "fromUser",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "toUser",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fromChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toChain",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08d323df5e712e4c4a9b59923ab15e1a1ebcc252eb046309ea9e1ebe95330ea3",
  "receipt": {
    "to": null,
    "from": "0xe599fB7EcDdE1A72438b9BFA0AA0b921e9250330",
    "contractAddress": "0x796206830675253021EF89654033CC98C72236Cd",
    "transactionIndex": 0,
    "gasUsed": "3786748",
    "logsBloom": "0x
    "blockHash": "0x87695ffb4cd04b13ac00bd2e905788af8ff53214b04f66800df90b53c79bd9a6",
    "transactionHash": "0x08d323df5e712e4c4a9b59923ab15e1a1ebcc252eb046309ea9e1ebe95330ea3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30324432,
        "transactionHash": "0x08d323df5e712e4c4a9b59923ab15e1a1ebcc252eb046309ea9e1ebe95330ea3",
        "address": "0x796206830675253021EF89654033CC98C72236Cd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e599fb7ecdde1a72438b9bfa0aa0b921e9250330",
          "0x000000000000000000000000e599fb7ecdde1a72438b9bfa0aa0b921e9250330"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x87695ffb4cd04b13ac00bd2e905788af8ff53214b04f66800df90b53c79bd9a6"
      }
    ],
    "blockNumber": 30324432,
    "cumulativeGasUsed": "3786748",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5755C95bde56EceD213cFd28473E4d46670BB2af",
    "115792089237316195423570985008687907853269984665640564039457584007913129639935",
    "0xe599fB7EcDdE1A72438b9BFA0AA0b921e9250330",
    50,
    0,
    "0xe599fB7EcDdE1A72438b9BFA0AA0b921e9250330",
    [
      "0xe599fB7EcDdE1A72438b9BFA0AA0b921e9250330"
    ],
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "e7ef12230759f964423496df218ede3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitPerSend_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeWallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSend_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeFulfill_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"relayers_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"relayerConsensusThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fromUser\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fromChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"toChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"FulfilledTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"toUser\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fromChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"toChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"SentTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURRENT_CHAIN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURRENT_CHAIN_B32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FULFILL_TX_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RELAYERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"chains\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exchangeRatesFromPow\",\"type\":\"uint256[]\"}],\"name\":\"addChains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"exchangeRateFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFulfill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"fromUser\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fromChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeAssist.FulfillTx\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fulfilledAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toUser\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fromChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeAssist.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTransactionsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"getUserTransactionsSlice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toUser\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fromChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeAssist.Transaction[]\",\"name\":\"transactions_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"isSupportedChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitPerSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerConsensusThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"chains\",\"type\":\"string[]\"}],\"name\":\"removeChains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"toUser\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toChain\",\"type\":\"string\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeSend_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeFulfill_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWallet_\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitPerSend_\",\"type\":\"uint256\"}],\"name\":\"setLimitPerSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"relayers_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"relayerConsensusThreshold_\",\"type\":\"uint256\"}],\"name\":\"setRelayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedChainList\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toUser\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fromChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"gotbit\",\"details\":\"Contract for sending tokens between chains assisted by a relayer, supporting fee on send/fulfill, supporting multiple chains including non-EVM blockchains, with a configurable limit per send and exchange rate between chains.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"CURRENT_CHAIN()\":{\"details\":\"Returns the current chain name as a string.\",\"returns\":{\"_0\":\"name of the current chain\"}},\"addChains(string[],uint256[])\":{\"details\":\"add chains to the whitelist\",\"params\":{\"chains\":\"chains to add\",\"exchangeRatesFromPow\":\"exchange rates for `chains` as a power of 10.     exchange rate is a multiplier that fixes the difference     between decimals on different chains\"}},\"constructor\":{\"params\":{\"relayers_\":\"list of relayers with NO DUPLICATES!! the check is not done for gas efficiency reasons\"}},\"fulfill((uint256,string,address,string,uint256),bytes[])\":{\"details\":\"fulfills a bridge transaction from another chain\",\"params\":{\"signatures\":\"signatures for `transaction` signed by `relayers` where `signatures[i]` is either a signature by `relayers[i]` or an empty array\",\"transaction\":\"bridge transaction to fulfill\"}},\"getRelayers()\":{\"returns\":{\"_0\":\"list of relayers\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUserTransactions(address)\":{\"details\":\"returns a list of bridge transactions sent by `user`   from the current chain\",\"params\":{\"user\":\"sender address\"},\"returns\":{\"_0\":\"list of transactions\"}},\"getUserTransactionsAmount(address)\":{\"details\":\"returns the amount of bridge transactions sent by `user`   from the current chain\",\"params\":{\"user\":\"user\"},\"returns\":{\"_0\":\"amount of transactions\"}},\"getUserTransactionsSlice(address,uint256,uint256)\":{\"details\":\"getting a slice of list of user transactions\",\"params\":{\"limit_\":\"length of array\",\"offset_\":\"start index\",\"user_\":\"user\"},\"returns\":{\"transactions_\":\"list of user transactions\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isSupportedChain(string)\":{\"details\":\"getting if chain is supported\",\"returns\":{\"_0\":\"is chain supported\"}},\"pause()\":{\"details\":\"pausing the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"relayersLength()\":{\"returns\":{\"_0\":\"amount of relayers\"}},\"removeChains(string[])\":{\"details\":\"remove chains from the whitelist\",\"params\":{\"chains\":\"chains to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"send(uint256,string,string)\":{\"details\":\"sends the user's tokens to another chain\",\"params\":{\"amount\":\"amount of tokens being sent\",\"toChain\":\"name of target chain (e.g. \\\"evm.97\\\", \\\"sol.mainnet-beta\\\")\",\"toUser\":\"address of user on target chain\"}},\"setFee(uint256,uint256)\":{\"details\":\"set fees for send and fulfill\",\"params\":{\"feeFulfill_\":\"fee for fulfill as numerator over FEE_DENOMINATOR\",\"feeSend_\":\"fee for send as numerator over FEE_DENOMINATOR\"}},\"setFeeWallet(address)\":{\"details\":\"sets the wallet where fees are sent\",\"params\":{\"feeWallet_\":\"fee wallet\"}},\"setLimitPerSend(uint256)\":{\"details\":\"sets the maximum amount of tokens that can be sent in one transaction\",\"params\":{\"limitPerSend_\":\"limit value\"}},\"setRelayers(address[],uint256)\":{\"details\":\"set the list of relayers and the consensus threshold used for fulfilling\",\"params\":{\"relayerConsensusThreshold_\":\"number of relayers required to agree to fulfill a transaction\",\"relayers_\":\"list of relayers with NO DUPLICATES!! there is no check for that for gas efficiency reasons\"}},\"supportedChainList()\":{\"details\":\"getting a list of supported chains\",\"returns\":{\"_0\":\"list of supported chains\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"unpausing the contract\"},\"withdraw(address,address,uint256)\":{\"details\":\"withdraw tokens from bridge\",\"params\":{\"amount\":\"amount to withdraw\",\"to\":\"the address the tokens will be sent\",\"token\":\"token to withdraw\"}}},\"title\":\"BridgeAssist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeAssist.sol\":\"BridgeAssist\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/BridgeAssist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.18;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/EIP712.sol';\\n\\n/// @title BridgeAssist\\n/// @author gotbit\\n/// @dev Contract for sending tokens between chains assisted by a relayer,\\n/// supporting fee on send/fulfill, supporting multiple chains including\\n/// non-EVM blockchains, with a configurable limit per send and exchange rate\\n/// between chains.\\ncontract BridgeAssist is AccessControl, Pausable, EIP712 {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct Transaction {\\n        uint256 amount;\\n        uint256 timestamp;\\n        address fromUser;\\n        string toUser; // can be a solana address\\n        string fromChain;\\n        string toChain;\\n        uint256 nonce;\\n        uint256 block;\\n    }\\n\\n    struct FulfillTx {\\n        uint256 amount;\\n        string fromUser; // can be a solana address\\n        address toUser;\\n        string fromChain;\\n        uint256 nonce;\\n    }\\n\\n    bytes32 public constant FULFILL_TX_TYPEHASH =\\n        keccak256(\\n            'FulfillTx(uint256 amount,string fromUser,address toUser,string fromChain,uint256 nonce)'\\n        );\\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    uint256 public constant MAX_RELAYERS = 100;\\n    bytes32 public immutable CURRENT_CHAIN_B32;\\n    IERC20 public immutable TOKEN;\\n\\n    address public feeWallet;\\n    uint256 public limitPerSend; // maximum amount of tokens that can be sent in 1 tx\\n    uint256 public feeSend;\\n    uint256 public feeFulfill;\\n    uint256 public nonce;\\n    uint256 public relayerConsensusThreshold;\\n\\n    mapping(address => Transaction[]) public transactions;\\n    mapping(string => mapping(string => mapping(uint256 => uint256))) public fulfilledAt;\\n    mapping(bytes32 => uint256) public exchangeRateFrom;\\n\\n    EnumerableSet.Bytes32Set private availableChainsToSend;\\n    address[] public relayers;\\n\\n    event SentTokens(\\n        address fromUser,\\n        string indexed toUser,\\n        string fromChain,\\n        string toChain,\\n        uint256 amount,\\n        uint256 exchangeRate\\n    );\\n\\n    event FulfilledTokens(\\n        string indexed fromUser,\\n        address indexed toUser,\\n        string fromChain,\\n        string toChain,\\n        uint256 amount,\\n        uint256 exchangeRate\\n    );\\n\\n    /// @param relayers_ list of relayers with NO DUPLICATES!!\\n    /// the check is not done for gas efficiency reasons\\n    constructor(\\n        IERC20 token,\\n        uint256 limitPerSend_,\\n        address feeWallet_,\\n        uint256 feeSend_,\\n        uint256 feeFulfill_,\\n        address owner,\\n        address[] memory relayers_,\\n        uint256 relayerConsensusThreshold_\\n    ) EIP712('BridgeAssist', '1.0') {\\n        require(address(token) != address(0), 'Token is zero address');\\n        require(feeWallet_ != address(0), 'Fee wallet is zero address');\\n        require(feeSend_ < FEE_DENOMINATOR, 'Fee send is too high');\\n        require(feeFulfill_ < FEE_DENOMINATOR, 'Fee fulfill is too high');\\n        require(owner != address(0), 'Owner is zero address');\\n        require(relayers_.length != 0, 'No relayers');\\n        require(relayers_.length <= MAX_RELAYERS, 'Too many relayers');\\n        require(relayerConsensusThreshold_ != 0, '0-of-N');\\n        require(relayerConsensusThreshold_ <= relayers_.length, 'N-of-N');\\n\\n        for (uint256 i = 0; i < relayers_.length; ) {\\n          for (uint256 j = 0; j < relayers_.length; ) {\\n            require(i == j || relayers_[i] != relayers_[j], 'Duplicate relayers');\\n            unchecked {++j;}\\n          }\\n          unchecked {++i;}\\n        }\\n        \\n        TOKEN = token;\\n        limitPerSend = limitPerSend_;\\n        feeWallet = feeWallet_;\\n        feeSend = feeSend_;\\n        feeFulfill = feeFulfill_;\\n        relayers = relayers_;\\n        relayerConsensusThreshold = relayerConsensusThreshold_;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        CURRENT_CHAIN_B32 = bytes32(\\n            bytes.concat('evm.', bytes(Strings.toString(uint256(block.chainid))))\\n        );\\n    }\\n\\n    /// @dev sends the user's tokens to another chain\\n    /// @param amount amount of tokens being sent\\n    /// @param toUser address of user on target chain\\n    /// @param toChain name of target chain (e.g. \\\"evm.97\\\", \\\"sol.mainnet-beta\\\")\\n    function send(\\n        uint256 amount,\\n        string memory toUser, // marked as memory to prevent \\\"stack too deep\\\"\\n        string calldata toChain\\n    ) external whenNotPaused {\\n        require(amount != 0, 'Amount = 0');\\n        require(amount <= limitPerSend, 'Amount is more than limit');\\n        require(bytes(toUser).length != 0, 'Field toUser is empty');\\n        require(isSupportedChain(toChain), 'Chain is not supported');\\n\\n        uint256 exchangeRate = exchangeRateFrom[bytes32(bytes(toChain))];\\n        require(amount % exchangeRate == 0, 'Amount is not divisible by exchange rate');\\n        // minimum amount to make sure satisfactory amount of fee is taken\\n        require(amount / exchangeRate >= FEE_DENOMINATOR, 'amount < fee denominator');\\n\\n        {\\n          uint256 balanceBefore = TOKEN.balanceOf(address(this));\\n          _receiveTokens(msg.sender, amount);\\n          uint256 balanceAfter = TOKEN.balanceOf(address(this));\\n\\n          require(balanceAfter - balanceBefore == amount, 'bad token');\\n        }\\n\\n        // the fee recipient eats the precision loss\\n        uint256 currentFee = (amount * feeSend) / FEE_DENOMINATOR / exchangeRate;\\n        if (currentFee != 0) _dispenseTokens(feeWallet, currentFee * exchangeRate);\\n\\n        transactions[msg.sender].push(\\n            Transaction({\\n                fromUser: msg.sender,\\n                toUser: toUser,\\n                amount: amount / exchangeRate - currentFee,\\n                // No logic of the system relies on this timestamp,\\n                // it's only needed for displaying on the frontend\\n                timestamp: block.timestamp,\\n                fromChain: CURRENT_CHAIN(),\\n                toChain: toChain,\\n                nonce: nonce++,\\n                block: block.number\\n            })\\n        );\\n        emit SentTokens(\\n            msg.sender,\\n            toUser,\\n            CURRENT_CHAIN(),\\n            toChain,\\n            // amount emitted is different than amount in the struct\\n            // because this is the amount that actually gets sent on this chain\\n            // it doesn't matter that much anyways since you can always get\\n            // the exchangeRate and do all the calculations yourself\\n            (amount - currentFee),\\n            exchangeRate\\n        );\\n    }\\n\\n    /// @dev fulfills a bridge transaction from another chain\\n    /// @param transaction bridge transaction to fulfill\\n    /// @param signatures signatures for `transaction` signed by `relayers` where\\n    /// `signatures[i]` is either a signature by `relayers[i]` or an empty array\\n    function fulfill(FulfillTx calldata transaction, bytes[] calldata signatures)\\n        external\\n        whenNotPaused\\n    {\\n        require(isSupportedChain(transaction.fromChain), 'Not supported fromChain');\\n        require(\\n          fulfilledAt[transaction.fromChain][transaction.fromUser][transaction.nonce] == 0,\\n          'Signature already fulfilled'\\n        );\\n        require(signatures.length == relayers.length, 'Bad signatures length');\\n\\n        bytes32 hashedData = _hashTransaction(transaction);\\n        uint256 relayerConsensus = 0;\\n\\n        for (uint256 i = 0; i < signatures.length; ) {\\n          if (signatures[i].length == 0) {\\n            unchecked {++i;}\\n            continue;\\n          }\\n          if (_verify(hashedData, signatures[i]) != relayers[i]) {\\n            revert(string.concat('Bad signature at index', Strings.toString(i)));\\n          }\\n          unchecked {\\n            ++relayerConsensus;\\n            ++i;\\n          }\\n        }\\n\\n        require(relayerConsensus >= relayerConsensusThreshold, 'Not enough relayers');\\n\\n        fulfilledAt[transaction.fromChain][transaction.fromUser][transaction.nonce] = block.number;\\n\\n        uint256 exchangeRate = exchangeRateFrom[bytes32(bytes(transaction.fromChain))];\\n        uint256 amount = transaction.amount * exchangeRate;\\n        uint256 currentFee = (amount * feeFulfill) / FEE_DENOMINATOR;\\n\\n        _dispenseTokens(transaction.toUser, amount - currentFee);\\n        if (currentFee != 0) _dispenseTokens(feeWallet, currentFee);\\n\\n        emit FulfilledTokens(\\n            transaction.fromUser,\\n            transaction.toUser,\\n            transaction.fromChain,\\n            CURRENT_CHAIN(),\\n            // amount emitted is different than amount in the struct\\n            // because this is the amount that actually gets sent on this chain\\n            // it doesn't matter that much anyways since you can always get\\n            // the exchangeRate and do all the calculations yourself\\n            amount - currentFee,\\n            exchangeRate\\n        );\\n    }\\n\\n    /// @dev add chains to the whitelist\\n    /// @param chains chains to add\\n    /// @param exchangeRatesFromPow exchange rates for `chains` as a power of 10.\\n    ///     exchange rate is a multiplier that fixes the difference\\n    ///     between decimals on different chains\\n    function addChains(string[] calldata chains, uint256[] calldata exchangeRatesFromPow)\\n        external\\n        onlyRole(MANAGER_ROLE)\\n    {\\n        require(chains.length == exchangeRatesFromPow.length, 'bad input');\\n\\n        for (uint256 i; i < chains.length; ) {\\n            require(\\n                availableChainsToSend.add(bytes32(bytes(chains[i]))),\\n                'Chain is already in the list'\\n            );\\n\\n            bytes32 chain = bytes32(bytes(chains[i]));\\n            // implicitly reverts on overflow\\n            uint256 exchangeRate = 10 ** exchangeRatesFromPow[i];\\n\\n            if (exchangeRateFrom[chain] != 0) {\\n              require(exchangeRateFrom[chain] == exchangeRate, 'cannot modify the exchange rate');\\n            } else {\\n              exchangeRateFrom[chain] = exchangeRate;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev set the list of relayers and the consensus threshold used for fulfilling\\n    /// @param relayers_ list of relayers with NO DUPLICATES!!\\n    /// there is no check for that for gas efficiency reasons\\n    /// @param relayerConsensusThreshold_ number of relayers required to agree to fulfill a transaction\\n    function setRelayers(address[] calldata relayers_, uint256 relayerConsensusThreshold_) external onlyRole(MANAGER_ROLE) {\\n        require(relayers_.length != 0, 'No relayers');\\n        require(relayers_.length <= MAX_RELAYERS, 'Too many relayers');\\n        require(relayerConsensusThreshold_ != 0, '0-of-N');\\n        require(relayerConsensusThreshold_ <= relayers_.length, 'N-of-N');\\n\\n        for (uint256 i = 0; i < relayers_.length; ) {\\n          for (uint256 j = 0; j < relayers_.length; ) {\\n            require(i == j || relayers_[i] != relayers_[j], 'Duplicate relayers');\\n            unchecked {++j;}\\n          }\\n          unchecked {++i;}\\n        }\\n\\n        relayers = relayers_;\\n        relayerConsensusThreshold = relayerConsensusThreshold_;\\n    }\\n\\n    /// @dev remove chains from the whitelist\\n    /// @param chains chains to remove\\n    function removeChains(string[] calldata chains)\\n        external\\n        onlyRole(MANAGER_ROLE)\\n    {\\n        for (uint256 i; i < chains.length; ) {\\n            require(\\n                availableChainsToSend.remove(bytes32(bytes(chains[i]))),\\n                'Chain is not in the list yet'\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev set fees for send and fulfill\\n    /// @param feeSend_ fee for send as numerator over FEE_DENOMINATOR\\n    /// @param feeFulfill_ fee for fulfill as numerator over FEE_DENOMINATOR\\n    function setFee(uint256 feeSend_, uint256 feeFulfill_)\\n        external\\n        onlyRole(MANAGER_ROLE)\\n    {\\n        require(\\n            feeSend != feeSend_ || feeFulfill != feeFulfill_,\\n            'Fee numerator repeats'\\n        );\\n        require(feeSend_ < FEE_DENOMINATOR, 'Fee is too high');\\n        require(feeFulfill_ < FEE_DENOMINATOR, 'Fee is too high');\\n        feeSend = feeSend_;\\n        feeFulfill = feeFulfill_;\\n    }\\n\\n    /// @dev sets the wallet where fees are sent\\n    /// @param feeWallet_ fee wallet\\n    function setFeeWallet(address feeWallet_) external onlyRole(MANAGER_ROLE) {\\n        require(feeWallet != feeWallet_, 'Fee wallet repeats');\\n        require(feeWallet_ != address(0), 'Fee wallet is zero address');\\n        feeWallet = feeWallet_;\\n    }\\n\\n    /// @dev sets the maximum amount of tokens that can be sent in one transaction\\n    /// @param limitPerSend_ limit value\\n    function setLimitPerSend(uint256 limitPerSend_)\\n        external\\n        onlyRole(MANAGER_ROLE)\\n    {\\n        require(limitPerSend != limitPerSend_, 'Limit per send repeats');\\n        limitPerSend = limitPerSend_;\\n    }\\n\\n    /// @dev withdraw tokens from bridge\\n    /// @param token token to withdraw\\n    /// @param to the address the tokens will be sent\\n    /// @param amount amount to withdraw\\n    function withdraw(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(MANAGER_ROLE) {\\n        SafeERC20.safeTransfer(token, to, amount);\\n    }\\n\\n    /// @dev pausing the contract\\n    function pause() external whenNotPaused onlyRole(MANAGER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @dev unpausing the contract\\n    function unpause() external whenPaused onlyRole(MANAGER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @dev getting a slice of list of user transactions\\n    /// @param user_ user\\n    /// @param offset_ start index\\n    /// @param limit_ length of array\\n    /// @return transactions_ list of user transactions\\n    function getUserTransactionsSlice(\\n        address user_,\\n        uint256 offset_,\\n        uint256 limit_\\n    ) external view returns (Transaction[] memory transactions_) {\\n        uint256 length = transactions[user_].length;\\n        require(length >= offset_ + limit_, 'bad offset/limit');\\n\\n        transactions_ = new Transaction[](limit_);\\n        for (uint256 i; i < limit_; ) {\\n            transactions_[i] = transactions[user_][offset_ + i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev returns a list of bridge transactions sent by `user`\\n    ///   from the current chain\\n    /// @param user sender address\\n    /// @return list of transactions\\n    function getUserTransactions(address user)\\n        external\\n        view\\n        returns (Transaction[] memory)\\n    {\\n        return transactions[user];\\n    }\\n\\n    /// @dev returns the amount of bridge transactions sent by `user`\\n    ///   from the current chain\\n    /// @param user user\\n    /// @return amount of transactions\\n    function getUserTransactionsAmount(address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return transactions[user].length;\\n    }\\n\\n    /// @dev getting a list of supported chains\\n    /// @return list of supported chains\\n    function supportedChainList() external view returns (bytes32[] memory) {\\n        return availableChainsToSend.values();\\n    }\\n\\n    /// @return amount of relayers\\n    function relayersLength() external view returns (uint256) {\\n      return relayers.length;\\n    }\\n\\n    /// @return list of relayers\\n    function getRelayers() external view returns (address[] memory) {\\n      return relayers;\\n    }\\n\\n    /// @dev getting if chain is supported\\n    /// @return is chain supported\\n    function isSupportedChain(string calldata chain) public view returns (bool) {\\n        return availableChainsToSend.contains(bytes32(bytes(chain)));\\n    }\\n\\n    /// @dev Returns the current chain name as a string.\\n    /// @return name of the current chain\\n    function CURRENT_CHAIN() public view returns (string memory) {\\n        return _toString(CURRENT_CHAIN_B32);\\n    }\\n\\n    /// @dev receive `amount` of tokens from address `user`\\n    /// @param from address to take tokens from\\n    /// @param amount amount of tokens to take\\n    function _receiveTokens(address from, uint256 amount) private {\\n        SafeERC20.safeTransferFrom(TOKEN, from, address(this), amount);\\n    }\\n\\n    /// @dev dispense `amount` of tokens to address `to`\\n    /// @param to address to dispense tokens to\\n    /// @param amount amount of tokens to dispense\\n    function _dispenseTokens(address to, uint256 amount) private {\\n        SafeERC20.safeTransfer(TOKEN, to, amount);\\n    }\\n\\n    /// @dev hashes `Transaction` structure with EIP-712 standard\\n    /// @param transaction `Transaction` structure\\n    /// @return hash hashed `Transaction` structure\\n    function _hashTransaction(FulfillTx memory transaction)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        FULFILL_TX_TYPEHASH,\\n                        transaction.amount,\\n                        keccak256(abi.encodePacked(transaction.fromUser)),\\n                        transaction.toUser,\\n                        keccak256(abi.encodePacked(transaction.fromChain)),\\n                        transaction.nonce\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @dev verify whether `signature` of `data` is valid and return the signer address\\n    /// @param data keccak256 hash of the signed data\\n    /// @param signature signature of `data`\\n    /// @return the signer address\\n    function _verify(bytes32 data, bytes calldata signature)\\n        private\\n        pure\\n        returns (address)\\n    {\\n        return ECDSA.recover(data, signature);\\n    }\\n\\n    /// @dev converts a null-terminated 32-byte string to a variable length string\\n    /// @param source null-terminated 32-byte string\\n    /// @return result a variable length null-terminated string\\n    function _toString(bytes32 source) private pure returns (string memory result) {\\n        uint8 length = 0;\\n        while (source[length] != 0 && length < 32) {\\n            length++;\\n        }\\n        assembly {\\n            result := mload(0x40)\\n            // new \\\"memory end\\\" including padding (the string isn't larger than 32 bytes)\\n            mstore(0x40, add(result, 0x40))\\n            // store length in memory\\n            mstore(result, length)\\n            // write actual data\\n            mstore(add(result, 0x20), source)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4531498a065c5f36542abb6b633963a72885ea1b4f1e14bffaf971a90c6911e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162004a7e38038062004a7e833981016040819052620000359162000859565b604080518082018252600c81526b109c9a5919d9505cdcda5cdd60a21b6020808301918252835180850190945260038452620312e360ec1b908401526001805460ff191690558151902060e08190527fe6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b36101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620001238184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525050506001600160a01b03891690506200018f5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e206973207a65726f2061646472657373000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038616620001e75760405162461bcd60e51b815260206004820152601a60248201527f4665652077616c6c6574206973207a65726f2061646472657373000000000000604482015260640162000186565b61271085106200023a5760405162461bcd60e51b815260206004820152601460248201527f4665652073656e6420697320746f6f2068696768000000000000000000000000604482015260640162000186565b61271084106200028d5760405162461bcd60e51b815260206004820152601760248201527f4665652066756c66696c6c20697320746f6f2068696768000000000000000000604482015260640162000186565b6001600160a01b038316620002e55760405162461bcd60e51b815260206004820152601560248201527f4f776e6572206973207a65726f20616464726573730000000000000000000000604482015260640162000186565b8151600003620003265760405162461bcd60e51b815260206004820152600b60248201526a4e6f2072656c617965727360a81b604482015260640162000186565b6064825111156200036e5760405162461bcd60e51b8152602060048201526011602482015270546f6f206d616e792072656c617965727360781b604482015260640162000186565b80600003620003a95760405162461bcd60e51b81526020600482015260066024820152651816b7b316a760d11b604482015260640162000186565b8151811115620003e55760405162461bcd60e51b81526020600482015260066024820152652716b7b316a760d11b604482015260640162000186565b60005b8251811015620004ae5760005b8351811015620004a457808214806200045857508381815181106200041e576200041e62000997565b60200260200101516001600160a01b031684838151811062000444576200044462000997565b60200260200101516001600160a01b031614155b6200049b5760405162461bcd60e51b81526020600482015260126024820152714475706c69636174652072656c617965727360701b604482015260640162000186565b600101620003f5565b50600101620003e8565b506001600160a01b038089166101605260028890556001805491881661010002610100600160a81b03199092169190911790556003859055600484905581516200050090600c90602085019062000797565b5060068190556200051360008462000568565b62000529466200060960201b6200219f1760201c565b6040516020016200053b9190620009ad565b6040516020818303038152906040526200055590620009ee565b610140525062000a169650505050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000605576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620005c43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b606060006200062383620006ad60201b620022311760201c565b60010190506000816001600160401b0381111562000645576200064562000843565b6040519080825280601f01601f19166020018201604052801562000670576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200067a57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310620006f7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831062000724576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200074357662386f26fc10000830492506010015b6305f5e10083106200075c576305f5e100830492506008015b61271083106200077157612710830492506004015b6064831062000784576064830492506002015b600a831062000791576001015b92915050565b828054828255906000526020600020908101928215620007ef579160200282015b82811115620007ef57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620007b8565b50620007fd92915062000801565b5090565b5b80821115620007fd576000815560010162000802565b6001600160a01b03811681146200082e57600080fd5b50565b80516200083e8162000818565b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080610100898b0312156200087757600080fd5b8851620008848162000818565b809850506020808a0151975060408a0151620008a08162000818565b8097505060608a0151955060808a0151945060a08a0151620008c28162000818565b60c08b01519094506001600160401b0380821115620008e057600080fd5b818c0191508c601f830112620008f557600080fd5b8151818111156200090a576200090a62000843565b8060051b604051601f19603f8301168101818110858211171562000932576200093262000843565b60405291825284820192508381018501918f8311156200095157600080fd5b938501935b828510156200097a576200096a8562000831565b8452938501939285019262000956565b80975050505050505060e089015190509295985092959890939650565b634e487b7160e01b600052603260045260246000fd5b6332bb369760e11b81526000825160005b81811015620009dd5760208186018101516004868401015201620009be565b506000920160040191825250919050565b8051602080830151919081101562000a10576000198160200360031b1b821691505b50919050565b60805160a05160c05160e05161010051610120516101405161016051613fdf62000a9f6000396000818161041301528181611bcc01528181611c63015281816126d301526127860152600081816104e901526112d301526000612d3101526000612d8001526000612d5b01526000612cb401526000612cde01526000612d080152613fdf6000f3fe608060405234801561001057600080fd5b50600436106102685760003560e01c8063984bd4b211610151578063d3649d6c116100c3578063e029159211610087578063e02915921461058e578063ec87621c146105a1578063ef925399146105b6578063f25f4b56146105c9578063f7b2bf68146105e1578063fe62c28b1461063357600080fd5b8063d3649d6c14610541578063d547741f1461054a578063d73792a91461055d578063d9caed1214610566578063e026faa71461057957600080fd5b8063ac37b22611610115578063ac37b226146104e4578063ae7cabbd1461050b578063affed0e014610513578063b049cec71461051c578063b46c31a41461052f578063cfae73071461053857600080fd5b8063984bd4b21461049b5780639a48e7f9146104ae5780639debb3bd146104c1578063a217fddf146104c9578063a427b242146104d157600080fd5b80633f4ba83a116101ea5780637233a666116101ae5780637233a666146103f957806382bfefc81461040e5780638456cb591461044d57806390d49b9d1461045557806391d148541461046857806397901c5a1461047b57600080fd5b80633f4ba83a1461038c578063416553261461039457806352f7c988146103bb5780635c975abb146103ce5780635f282ba4146103d957600080fd5b8063248a9ca311610231578063248a9ca3146102f95780632aaf5ed51461032a5780632cf267011461033d5780632f2ff15d1461036657806336568abe1461037957600080fd5b8062f54e801461026d57806301ffc9a71461028257806314538128146102aa578063179ff4b2146102d15780631e12ef29146102e6575b600080fd5b61028061027b366004613265565b61063c565b005b6102956102903660046132d0565b610818565b60405190151581526020015b60405180910390f35b6102bd6102b836600461330f565b61084f565b6040516102a198979695949392919061338b565b6102d9610a52565b6040516102a191906133fd565b6102806102f436600461344a565b610ab4565b61031c61030736600461348b565b60009081526020819052604090206001015490565b6040519081526020016102a1565b6102806103383660046134a4565b610b69565b61031c61034b3660046134ef565b6001600160a01b031660009081526007602052604090205490565b61028061037436600461350c565b610d61565b61028061038736600461350c565b610d8b565b610280610e09565b61031c7fcb87858191633bd77793d261daabf61ecc1356b8074c6678235852edf88a10dc81565b6102806103c936600461353c565b610e34565b60015460ff16610295565b6103ec6103e736600461355e565b610f35565b6040516102a19190613593565b6104016112cc565b6040516102a19190613676565b6104357f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102a1565b6102806112fc565b6102806104633660046134ef565b611324565b61029561047636600461350c565b611412565b61031c61048936600461348b565b60096020526000908152604090205481565b6102806104a9366004613689565b61143b565b6104356104bc36600461348b565b61189c565b61031c606481565b61031c600081565b6102806104df36600461348b565b6118c6565b61031c7f000000000000000000000000000000000000000000000000000000000000000081565b600c5461031c565b61031c60055481565b61029561052a36600461373a565b61192e565b61031c60045481565b61031c60035481565b61031c60025481565b61028061055836600461350c565b61194c565b61031c61271081565b61028061057436600461376f565b611971565b610581611994565b6040516102a191906137b0565b61028061059c36600461388a565b6119a0565b61031c600080516020613f8a83398151915281565b6103ec6105c43660046134ef565b611f34565b6001546104359061010090046001600160a01b031681565b61031c6105ef3660046138ed565b825160208185018101805160088252928201958201959095209190945282518084018501805192815290850193850193909320925291526000908152604090205481565b61031c60065481565b600080516020613f8a83398151915261065481612309565b8382146106945760405162461bcd60e51b8152602060048201526009602482015268189859081a5b9c1d5d60ba1b60448201526064015b60405180910390fd5b60005b84811015610810576106d78686838181106106b4576106b4613959565b90506020028101906106c6919061396f565b6106cf916139b5565b600a90612313565b6107235760405162461bcd60e51b815260206004820152601c60248201527f436861696e20697320616c726561647920696e20746865206c69737400000000604482015260640161068b565b600086868381811061073757610737613959565b9050602002810190610749919061396f565b610752916139b5565b9050600085858481811061076857610768613959565b90506020020135600a61077b9190613acd565b600083815260096020526040902054909150156107f45760008281526009602052604090205481146107ef5760405162461bcd60e51b815260206004820152601f60248201527f63616e6e6f74206d6f64696679207468652065786368616e6765207261746500604482015260640161068b565b610806565b60008281526009602052604090208190555b5050600101610697565b505050505050565b60006001600160e01b03198216637965db0b60e01b148061084957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6007602052816000526040600020818154811061086b57600080fd5b600091825260209091206008909102018054600182015460028301546003840180549396509194506001600160a01b031692916108a790613ad9565b80601f01602080910402602001604051908101604052809291908181526020018280546108d390613ad9565b80156109205780601f106108f557610100808354040283529160200191610920565b820191906000526020600020905b81548152906001019060200180831161090357829003601f168201915b50505050509080600401805461093590613ad9565b80601f016020809104026020016040519081016040528092919081815260200182805461096190613ad9565b80156109ae5780601f10610983576101008083540402835291602001916109ae565b820191906000526020600020905b81548152906001019060200180831161099157829003601f168201915b5050505050908060050180546109c390613ad9565b80601f01602080910402602001604051908101604052809291908181526020018280546109ef90613ad9565b8015610a3c5780601f10610a1157610100808354040283529160200191610a3c565b820191906000526020600020905b815481529060010190602001808311610a1f57829003601f168201915b5050505050908060060154908060070154905088565b6060600c805480602002602001604051908101604052809291908181526020018280548015610aaa57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a8c575b5050505050905090565b600080516020613f8a833981519152610acc81612309565b60005b82811015610b6357610b0f848483818110610aec57610aec613959565b9050602002810190610afe919061396f565b610b07916139b5565b600a9061231f565b610b5b5760405162461bcd60e51b815260206004820152601c60248201527f436861696e206973206e6f7420696e20746865206c6973742079657400000000604482015260640161068b565b600101610acf565b50505050565b600080516020613f8a833981519152610b8181612309565b6000839003610bc05760405162461bcd60e51b815260206004820152600b60248201526a4e6f2072656c617965727360a81b604482015260640161068b565b6064831115610c055760405162461bcd60e51b8152602060048201526011602482015270546f6f206d616e792072656c617965727360781b604482015260640161068b565b81600003610c3e5760405162461bcd60e51b81526020600482015260066024820152651816b7b316a760d11b604482015260640161068b565b82821115610c775760405162461bcd60e51b81526020600482015260066024820152652716b7b316a760d11b604482015260640161068b565b60005b83811015610d4b5760005b84811015610d425780821480610cf95750858582818110610ca857610ca8613959565b9050602002016020810190610cbd91906134ef565b6001600160a01b0316868684818110610cd857610cd8613959565b9050602002016020810190610ced91906134ef565b6001600160a01b031614155b610d3a5760405162461bcd60e51b81526020600482015260126024820152714475706c69636174652072656c617965727360701b604482015260640161068b565b600101610c85565b50600101610c7a565b50610d58600c85856131a9565b50506006555050565b600082815260208190526040902060010154610d7c81612309565b610d86838361232b565b505050565b6001600160a01b0381163314610dfb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161068b565b610e0582826123af565b5050565b610e11612414565b600080516020613f8a833981519152610e2981612309565b610e3161245f565b50565b600080516020613f8a833981519152610e4c81612309565b82600354141580610e5f57508160045414155b610ea35760405162461bcd60e51b8152602060048201526015602482015274466565206e756d657261746f72207265706561747360581b604482015260640161068b565b6127108310610ee65760405162461bcd60e51b815260206004820152600f60248201526e08ccaca40d2e640e8dede40d0d2ced608b1b604482015260640161068b565b6127108210610f295760405162461bcd60e51b815260206004820152600f60248201526e08ccaca40d2e640e8dede40d0d2ced608b1b604482015260640161068b565b50600391909155600455565b6001600160a01b038316600090815260076020526040902054606090610f5b8385613b13565b811015610f9d5760405162461bcd60e51b815260206004820152601060248201526f189859081bd9999cd95d0bdb1a5b5a5d60821b604482015260640161068b565b826001600160401b03811115610fb557610fb56137e8565b60405190808252806020026020018201604052801561103757816020015b611024604051806101000160405280600081526020016000815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081525090565b815260200190600190039081610fd35790505b50915060005b838110156112c3576001600160a01b03861660009081526007602052604090206110678287613b13565b8154811061107757611077613959565b90600052602060002090600802016040518061010001604052908160008201548152602001600182015481526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820180546110e490613ad9565b80601f016020809104026020016040519081016040528092919081815260200182805461111090613ad9565b801561115d5780601f106111325761010080835404028352916020019161115d565b820191906000526020600020905b81548152906001019060200180831161114057829003601f168201915b5050505050815260200160048201805461117690613ad9565b80601f01602080910402602001604051908101604052809291908181526020018280546111a290613ad9565b80156111ef5780601f106111c4576101008083540402835291602001916111ef565b820191906000526020600020905b8154815290600101906020018083116111d257829003601f168201915b5050505050815260200160058201805461120890613ad9565b80601f016020809104026020016040519081016040528092919081815260200182805461123490613ad9565b80156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b50505050508152602001600682015481526020016007820154815250508382815181106112b0576112b0613959565b602090810291909101015260010161103d565b50509392505050565b60606112f77f00000000000000000000000000000000000000000000000000000000000000006124b1565b905090565b61130461251c565b600080516020613f8a83398151915261131c81612309565b610e31612562565b600080516020613f8a83398151915261133c81612309565b6001546001600160a01b0380841661010090920416036113935760405162461bcd60e51b81526020600482015260126024820152714665652077616c6c6574207265706561747360701b604482015260640161068b565b6001600160a01b0382166113e95760405162461bcd60e51b815260206004820152601a60248201527f4665652077616c6c6574206973207a65726f2061646472657373000000000000604482015260640161068b565b50600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61144361251c565b61145361052a606085018561396f565b61149f5760405162461bcd60e51b815260206004820152601760248201527f4e6f7420737570706f727465642066726f6d436861696e000000000000000000604482015260640161068b565b60086114ae606085018561396f565b6040516114bc929190613b26565b90815260200160405180910390208380602001906114da919061396f565b6040516114e8929190613b26565b90815260200160405180910390206000846080013581526020019081526020016000205460001461155b5760405162461bcd60e51b815260206004820152601b60248201527f5369676e617475726520616c72656164792066756c66696c6c65640000000000604482015260640161068b565b600c5481146115a45760405162461bcd60e51b8152602060048201526015602482015274084c2c840e6d2cedcc2e8eae4cae640d8cadccee8d605b1b604482015260640161068b565b60006115b76115b285613b36565b61259d565b90506000805b838110156116a8578484828181106115d7576115d7613959565b90506020028101906115e9919061396f565b90506000036115fa576001016115bd565b600c818154811061160d5761160d613959565b6000918252602090912001546001600160a01b031661164f8487878581811061163857611638613959565b905060200281019061164a919061396f565b612684565b6001600160a01b03161461169c576116668161219f565b6040516020016116769190613be6565b60408051601f198184030181529082905262461bcd60e51b825261068b91600401613676565b600191820191016115bd565b506006548110156116f15760405162461bcd60e51b81526020600482015260136024820152724e6f7420656e6f7567682072656c617965727360681b604482015260640161068b565b436008611701606088018861396f565b60405161170f929190613b26565b908152602001604051809103902086806020019061172d919061396f565b60405161173b929190613b26565b908152604080516020928190038301902060808901356000908152925281209190915560098161176e606089018961396f565b611777916139b5565b815260208101919091526040016000908120549150611797828835613c24565b90506000612710600454836117ac9190613c24565b6117b69190613c51565b90506117da6117cb60608a0160408b016134ef565b6117d58385613c65565b6126ce565b80156117fb576001546117fb9061010090046001600160a01b0316826126ce565b61180b6060890160408a016134ef565b6001600160a01b031661182160208a018a61396f565b60405161182f929190613b26565b6040519081900390207f1a82954c00ba4231b18dbc7d7d5187028cfc140ac6efedeeb60397b8710a9d9361186660608c018c61396f565b61186e6112cc565b6118788789613c65565b8960405161188a959493929190613ca1565b60405180910390a35050505050505050565b600c81815481106118ac57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080516020613f8a8339815191526118de81612309565b81600254036119285760405162461bcd60e51b81526020600482015260166024820152754c696d6974207065722073656e64207265706561747360501b604482015260640161068b565b50600255565b600061194561193d83856139b5565b600a906126f9565b9392505050565b60008281526020819052604090206001015461196781612309565b610d8683836123af565b600080516020613f8a83398151915261198981612309565b610b63848484612711565b60606112f7600a612774565b6119a861251c565b836000036119e55760405162461bcd60e51b815260206004820152600a6024820152690416d6f756e74203d20360b41b604482015260640161068b565b600254841115611a375760405162461bcd60e51b815260206004820152601960248201527f416d6f756e74206973206d6f7265207468616e206c696d697400000000000000604482015260640161068b565b8251600003611a805760405162461bcd60e51b81526020600482015260156024820152744669656c6420746f5573657220697320656d70747960581b604482015260640161068b565b611a8a828261192e565b611acf5760405162461bcd60e51b815260206004820152601660248201527510da185a5b881a5cc81b9bdd081cdd5c1c1bdc9d195960521b604482015260640161068b565b6000600981611ade84866139b5565b81526020019081526020016000205490508085611afb9190613cdc565b15611b595760405162461bcd60e51b815260206004820152602860248201527f416d6f756e74206973206e6f7420646976697369626c652062792065786368616044820152676e6765207261746560c01b606482015260840161068b565b612710611b668287613c51565b1015611bb45760405162461bcd60e51b815260206004820152601860248201527f616d6f756e74203c206665652064656e6f6d696e61746f720000000000000000604482015260640161068b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3f9190613cf0565b9050611c4b3387612781565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd69190613cf0565b905086611ce38383613c65565b14611d1c5760405162461bcd60e51b81526020600482015260096024820152683130b2103a37b5b2b760b91b604482015260640161068b565b505060008161271060035488611d329190613c24565b611d3c9190613c51565b611d469190613c51565b90508015611d6d57600154611d6d9061010090046001600160a01b03166117d58484613c24565b336000908152600760205260409081902081516101008101909252908083611d95868b613c51565b611d9f9190613c65565b815242602082015233604082015260608101889052608001611dbf6112cc565b815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250506005805460209094019392909150611e1283613d09565b909155508152436020918201528254600180820185556000948552938290208351600890920201908155908201519281019290925560408101516002830180546001600160a01b0319166001600160a01b0390921691909117905560608101519091906003820190611e849082613d68565b5060808201516004820190611e999082613d68565b5060a08201516005820190611eae9082613d68565b5060c0820151816006015560e08201518160070155505084604051611ed39190613e27565b60405180910390207f39ca9eb9de2c42145bdc9525fbfac365c3f8e2abdf97dd94e64ec1258365b9f733611f056112cc565b8787611f11878d613c65565b88604051611f2496959493929190613e43565b60405180910390a2505050505050565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609492939192909184015b828210156121945760008481526020908190206040805161010081018252600886029092018054835260018101549383019390935260028301546001600160a01b031690820152600382018054919291606084019190611fcb90613ad9565b80601f0160208091040260200160405190810160405280929190818152602001828054611ff790613ad9565b80156120445780601f1061201957610100808354040283529160200191612044565b820191906000526020600020905b81548152906001019060200180831161202757829003601f168201915b5050505050815260200160048201805461205d90613ad9565b80601f016020809104026020016040519081016040528092919081815260200182805461208990613ad9565b80156120d65780601f106120ab576101008083540402835291602001916120d6565b820191906000526020600020905b8154815290600101906020018083116120b957829003601f168201915b505050505081526020016005820180546120ef90613ad9565b80601f016020809104026020016040519081016040528092919081815260200182805461211b90613ad9565b80156121685780601f1061213d57610100808354040283529160200191612168565b820191906000526020600020905b81548152906001019060200180831161214b57829003601f168201915b505050505081526020016006820154815260200160078201548152505081526020019060010190611f6c565b505050509050919050565b606060006121ac83612231565b60010190506000816001600160401b038111156121cb576121cb6137e8565b6040519080825280601f01601f1916602001820160405280156121f5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846121ff57509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106122705772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061229c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106122ba57662386f26fc10000830492506010015b6305f5e10083106122d2576305f5e100830492506008015b61271083106122e657612710830492506004015b606483106122f8576064830492506002015b600a83106108495760010192915050565b610e3181336127ad565b600061194583836127e0565b6000611945838361282f565b6123358282611412565b610e05576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561236b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6123b98282611412565b15610e05576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff1661245d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161068b565b565b612467612414565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606060005b828160ff16602081106124cb576124cb613959565b1a60f81b6001600160f81b031916158015906124ea575060208160ff16105b1561250157806124f981613e90565b9150506124b6565b60405191506040820160405280825282602083015250919050565b60015460ff161561245d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161068b565b61256a61251c565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612494565b60006108497fcb87858191633bd77793d261daabf61ecc1356b8074c6678235852edf88a10dc836000015184602001516040516020016125dd9190613e27565b604051602081830303815290604052805190602001208560400151866060015160405160200161260d9190613e27565b60405160208183030381529060405280519060200120876080015160405160200161266996959493929190958652602086019490945260408501929092526001600160a01b03166060840152608083015260a082015260c00190565b60405160208183030381529060405280519060200120612922565b60006126c68484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061297092505050565b949350505050565b610e057f00000000000000000000000000000000000000000000000000000000000000008383612711565b60008181526001830160205260408120541515611945565b6040516001600160a01b038316602482015260448101829052610d8690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612994565b6060600061194583612a66565b610e057f0000000000000000000000000000000000000000000000000000000000000000833084612ac2565b6127b78282611412565b610e05576127c481612afa565b6127cf836020612b0c565b604051602001611676929190613eaf565b600081815260018301602052604081205461282757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610849565b506000610849565b60008181526001830160205260408120548015612918576000612853600183613c65565b855490915060009061286790600190613c65565b90508181146128cc57600086600001828154811061288757612887613959565b90600052602060002001549050808760000184815481106128aa576128aa613959565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128dd576128dd613f24565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610849565b6000915050610849565b600061084961292f612ca7565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061297f8585612dce565b9150915061298c81612e13565b509392505050565b60006129e9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f5d9092919063ffffffff16565b805190915015610d865780806020019051810190612a079190613f3a565b610d865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161068b565b606081600001805480602002602001604051908101604052809291908181526020018280548015612ab657602002820191906000526020600020905b815481526020019060010190808311612aa2575b50505050509050919050565b6040516001600160a01b0380851660248301528316604482015260648101829052610b639085906323b872dd60e01b9060840161273d565b60606108496001600160a01b03831660145b60606000612b1b836002613c24565b612b26906002613b13565b6001600160401b03811115612b3d57612b3d6137e8565b6040519080825280601f01601f191660200182016040528015612b67576020820181803683370190505b509050600360fc1b81600081518110612b8257612b82613959565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612bb157612bb1613959565b60200101906001600160f81b031916908160001a9053506000612bd5846002613c24565b612be0906001613b13565b90505b6001811115612c58576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612c1457612c14613959565b1a60f81b828281518110612c2a57612c2a613959565b60200101906001600160f81b031916908160001a90535060049490941c93612c5181613f5c565b9050612be3565b5083156119455760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161068b565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612d0057507f000000000000000000000000000000000000000000000000000000000000000046145b15612d2a57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604103612e045760208301516040840151606085015160001a612df887828585612f6c565b94509450505050612e0c565b506000905060025b9250929050565b6000816004811115612e2757612e27613f73565b03612e2f5750565b6001816004811115612e4357612e43613f73565b03612e905760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161068b565b6002816004811115612ea457612ea4613f73565b03612ef15760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161068b565b6003816004811115612f0557612f05613f73565b03610e315760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161068b565b60606126c68484600085613030565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612fa35750600090506003613027565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612ff7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661302057600060019250925050613027565b9150600090505b94509492505050565b6060824710156130915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161068b565b600080866001600160a01b031685876040516130ad9190613e27565b60006040518083038185875af1925050503d80600081146130ea576040519150601f19603f3d011682016040523d82523d6000602084013e6130ef565b606091505b50915091506131008783838761310b565b979650505050505050565b6060831561317a578251600003613173576001600160a01b0385163b6131735760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161068b565b50816126c6565b6126c6838381511561318f5781518083602001fd5b8060405162461bcd60e51b815260040161068b9190613676565b8280548282559060005260206000209081019282156131fc579160200282015b828111156131fc5781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906131c9565b5061320892915061320c565b5090565b5b80821115613208576000815560010161320d565b60008083601f84011261323357600080fd5b5081356001600160401b0381111561324a57600080fd5b6020830191508360208260051b8501011115612e0c57600080fd5b6000806000806040858703121561327b57600080fd5b84356001600160401b038082111561329257600080fd5b61329e88838901613221565b909650945060208701359150808211156132b757600080fd5b506132c487828801613221565b95989497509550505050565b6000602082840312156132e257600080fd5b81356001600160e01b03198116811461194557600080fd5b6001600160a01b0381168114610e3157600080fd5b6000806040838503121561332257600080fd5b823561332d816132fa565b946020939093013593505050565b60005b8381101561335657818101518382015260200161333e565b50506000910152565b6000815180845261337781602086016020860161333b565b601f01601f19169290920160200192915050565b888152602081018890526001600160a01b0387166040820152610100606082018190526000906133bd8382018961335f565b905082810360808401526133d1818861335f565b905082810360a08401526133e5818761335f565b60c0840195909552505060e001529695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561343e5783516001600160a01b031683529284019291840191600101613419565b50909695505050505050565b6000806020838503121561345d57600080fd5b82356001600160401b0381111561347357600080fd5b61347f85828601613221565b90969095509350505050565b60006020828403121561349d57600080fd5b5035919050565b6000806000604084860312156134b957600080fd5b83356001600160401b038111156134cf57600080fd5b6134db86828701613221565b909790965060209590950135949350505050565b60006020828403121561350157600080fd5b8135611945816132fa565b6000806040838503121561351f57600080fd5b823591506020830135613531816132fa565b809150509250929050565b6000806040838503121561354f57600080fd5b50508035926020909101359150565b60008060006060848603121561357357600080fd5b833561357e816132fa565b95602085013595506040909401359392505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561366857888303603f190185528151805184528781015188850152868101516001600160a01b03811688860152610100905060608083015182828801526136078388018261335f565b9250505060808083015186830382880152613622838261335f565b9250505060a0808301518683038288015261363d838261335f565b60c0858101519089015260e094850151949097019390935250505093860193908601906001016135ba565b509098975050505050505050565b602081526000611945602083018461335f565b60008060006040848603121561369e57600080fd5b83356001600160401b03808211156136b557600080fd5b9085019060a082880312156136c957600080fd5b909350602085013590808211156136df57600080fd5b506136ec86828701613221565b9497909650939450505050565b60008083601f84011261370b57600080fd5b5081356001600160401b0381111561372257600080fd5b602083019150836020828501011115612e0c57600080fd5b6000806020838503121561374d57600080fd5b82356001600160401b0381111561376357600080fd5b61347f858286016136f9565b60008060006060848603121561378457600080fd5b833561378f816132fa565b9250602084013561379f816132fa565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b8181101561343e578351835292840192918401916001016137cc565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261380f57600080fd5b81356001600160401b0380821115613829576138296137e8565b604051601f8301601f19908116603f01168101908282118183101715613851576138516137e8565b8160405283815286602085880101111561386a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080606085870312156138a057600080fd5b8435935060208501356001600160401b03808211156138be57600080fd5b6138ca888389016137fe565b945060408701359150808211156138e057600080fd5b506132c4878288016136f9565b60008060006060848603121561390257600080fd5b83356001600160401b038082111561391957600080fd5b613925878388016137fe565b9450602086013591508082111561393b57600080fd5b50613948868287016137fe565b925050604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261398657600080fd5b8301803591506001600160401b038211156139a057600080fd5b602001915036819003821315612e0c57600080fd5b8035602083101561084957600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115613a24578160001904821115613a0a57613a0a6139d3565b80851615613a1757918102915b93841c93908002906139ee565b509250929050565b600082613a3b57506001610849565b81613a4857506000610849565b8160018114613a5e5760028114613a6857613a84565b6001915050610849565b60ff841115613a7957613a796139d3565b50506001821b610849565b5060208310610133831016604e8410600b8410161715613aa7575081810a610849565b613ab183836139e9565b8060001904821115613ac557613ac56139d3565b029392505050565b60006119458383613a2c565b600181811c90821680613aed57607f821691505b602082108103613b0d57634e487b7160e01b600052602260045260246000fd5b50919050565b80820180821115610849576108496139d3565b8183823760009101908152919050565b600060a08236031215613b4857600080fd5b60405160a081016001600160401b038282108183111715613b6b57613b6b6137e8565b81604052843583526020850135915080821115613b8757600080fd5b613b93368387016137fe565b602084015260408501359150613ba8826132fa565b8160408401526060850135915080821115613bc257600080fd5b50613bcf368286016137fe565b606083015250608092830135928101929092525090565b75084c2c840e6d2cedcc2e8eae4ca40c2e840d2dcc8caf60531b815260008251613c1781601685016020870161333b565b9190910160160192915050565b8082028115828204841417610849576108496139d3565b634e487b7160e01b600052601260045260246000fd5b600082613c6057613c60613c3b565b500490565b81810381811115610849576108496139d3565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b608081526000613cb5608083018789613c78565b8281036020840152613cc7818761335f565b60408401959095525050606001529392505050565b600082613ceb57613ceb613c3b565b500690565b600060208284031215613d0257600080fd5b5051919050565b600060018201613d1b57613d1b6139d3565b5060010190565b601f821115610d8657600081815260208120601f850160051c81016020861015613d495750805b601f850160051c820191505b8181101561081057828155600101613d55565b81516001600160401b03811115613d8157613d816137e8565b613d9581613d8f8454613ad9565b84613d22565b602080601f831160018114613dca5760008415613db25750858301515b600019600386901b1c1916600185901b178555610810565b600085815260208120601f198616915b82811015613df957888601518255948401946001909101908401613dda565b5085821015613e175787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251613e3981846020870161333b565b9190910192915050565b6001600160a01b038716815260a060208201819052600090613e679083018861335f565b8281036040840152613e7a818789613c78565b6060840195909552505060800152949350505050565b600060ff821660ff8103613ea657613ea66139d3565b60010192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613ee781601785016020880161333b565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613f1881602884016020880161333b565b01602801949350505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613f4c57600080fd5b8151801515811461194557600080fd5b600081613f6b57613f6b6139d3565b506000190190565b634e487b7160e01b600052602160045260246000fdfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a26469706673582212206824ed0b6442d163e718809ffae55bc053d3b34df70ae6502ba3a48f48c9a78664736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "gotbit",
    "details": "Contract for sending tokens between chains assisted by a relayer, supporting fee on send/fulfill, supporting multiple chains including non-EVM blockchains, with a configurable limit per send and exchange rate between chains.",
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "CURRENT_CHAIN()": {
        "details": "Returns the current chain name as a string.",
        "returns": {
          "_0": "name of the current chain"
        }
      },
      "addChains(string[],uint256[])": {
        "details": "add chains to the whitelist",
        "params": {
          "chains": "chains to add",
          "exchangeRatesFromPow": "exchange rates for `chains` as a power of 10.     exchange rate is a multiplier that fixes the difference     between decimals on different chains"
        }
      },
      "constructor": {
        "params": {
          "relayers_": "list of relayers with NO DUPLICATES!! the check is not done for gas efficiency reasons"
        }
      },
      "fulfill((uint256,string,address,string,uint256),bytes[])": {
        "details": "fulfills a bridge transaction from another chain",
        "params": {
          "signatures": "signatures for `transaction` signed by `relayers` where `signatures[i]` is either a signature by `relayers[i]` or an empty array",
          "transaction": "bridge transaction to fulfill"
        }
      },
      "getRelayers()": {
        "returns": {
          "_0": "list of relayers"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUserTransactions(address)": {
        "details": "returns a list of bridge transactions sent by `user`   from the current chain",
        "params": {
          "user": "sender address"
        },
        "returns": {
          "_0": "list of transactions"
        }
      },
      "getUserTransactionsAmount(address)": {
        "details": "returns the amount of bridge transactions sent by `user`   from the current chain",
        "params": {
          "user": "user"
        },
        "returns": {
          "_0": "amount of transactions"
        }
      },
      "getUserTransactionsSlice(address,uint256,uint256)": {
        "details": "getting a slice of list of user transactions",
        "params": {
          "limit_": "length of array",
          "offset_": "start index",
          "user_": "user"
        },
        "returns": {
          "transactions_": "list of user transactions"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isSupportedChain(string)": {
        "details": "getting if chain is supported",
        "returns": {
          "_0": "is chain supported"
        }
      },
      "pause()": {
        "details": "pausing the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "relayersLength()": {
        "returns": {
          "_0": "amount of relayers"
        }
      },
      "removeChains(string[])": {
        "details": "remove chains from the whitelist",
        "params": {
          "chains": "chains to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "send(uint256,string,string)": {
        "details": "sends the user's tokens to another chain",
        "params": {
          "amount": "amount of tokens being sent",
          "toChain": "name of target chain (e.g. \"evm.97\", \"sol.mainnet-beta\")",
          "toUser": "address of user on target chain"
        }
      },
      "setFee(uint256,uint256)": {
        "details": "set fees for send and fulfill",
        "params": {
          "feeFulfill_": "fee for fulfill as numerator over FEE_DENOMINATOR",
          "feeSend_": "fee for send as numerator over FEE_DENOMINATOR"
        }
      },
      "setFeeWallet(address)": {
        "details": "sets the wallet where fees are sent",
        "params": {
          "feeWallet_": "fee wallet"
        }
      },
      "setLimitPerSend(uint256)": {
        "details": "sets the maximum amount of tokens that can be sent in one transaction",
        "params": {
          "limitPerSend_": "limit value"
        }
      },
      "setRelayers(address[],uint256)": {
        "details": "set the list of relayers and the consensus threshold used for fulfilling",
        "params": {
          "relayerConsensusThreshold_": "number of relayers required to agree to fulfill a transaction",
          "relayers_": "list of relayers with NO DUPLICATES!! there is no check for that for gas efficiency reasons"
        }
      },
      "supportedChainList()": {
        "details": "getting a list of supported chains",
        "returns": {
          "_0": "list of supported chains"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "unpausing the contract"
      },
      "withdraw(address,address,uint256)": {
        "details": "withdraw tokens from bridge",
        "params": {
          "amount": "amount to withdraw",
          "to": "the address the tokens will be sent",
          "token": "token to withdraw"
        }
      }
    },
    "title": "BridgeAssist",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 406,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4130,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "feeWallet",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4132,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "limitPerSend",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4134,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "feeSend",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4136,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "feeFulfill",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4138,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "nonce",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4140,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "relayerConsensusThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4146,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "transactions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Transaction)4096_storage)dyn_storage)"
      },
      {
        "astId": 4154,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "fulfilledAt",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 4158,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "exchangeRateFrom",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4161,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "availableChainsToSend",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Bytes32Set)3651_storage"
      },
      {
        "astId": 4164,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "relayers",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Transaction)4096_storage)dyn_storage": {
        "base": "t_struct(Transaction)4096_storage",
        "encoding": "dynamic_array",
        "label": "struct BridgeAssist.Transaction[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Transaction)4096_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BridgeAssist.Transaction[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Transaction)4096_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)3651_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 3650,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3457_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3457_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3452,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3456,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transaction)4096_storage": {
        "encoding": "inplace",
        "label": "struct BridgeAssist.Transaction",
        "members": [
          {
            "astId": 4081,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4083,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4085,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "fromUser",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4087,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "toUser",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4089,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "fromChain",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4091,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "toChain",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4093,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "nonce",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4095,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "block",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}